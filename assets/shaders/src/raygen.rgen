#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "globals.glsl"
#include "utils.glsl"

layout(set = 0, binding = 0) uniform accelerationStructureEXT TLAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D accumulationImage;
layout(set = 0, binding = 2, rgba8) uniform image2D resultImage;

layout(location = 0) rayPayloadEXT RayPayload pld;

layout(set = 1, binding = 0, scalar) uniform CameraBufferRT
{
    mat4 inverseView;
    mat4 inverseProjection;
} camera;

layout(set = 2, binding = 0) uniform sampler2D textures[];
layout(set = 2, binding = 2, scalar) buffer _MaterialInfo { Material materials[]; };

layout(push_constant) uniform PushConstants {
    int frame;
};

#include "surface_state.glsl"
#include "disney_bsdf.glsl"

void createRay(in vec2 screenUV, out vec4 origin, out vec4 direction)
{
    origin = camera.inverseView * vec4(0.0, 0.0, 0.0, 1.0);
    vec4 target = camera.inverseProjection * vec4(screenUV.x, screenUV.y, 1.0, 1.0);
    direction = normalize(camera.inverseView * vec4(normalize(target.xyz), 0.0));
}

vec3 sampleHemisphereCosine()
{
    float u = rand();
    float v = rand();

    float phi = TWO_PI * u;
    float cosTheta = sqrt(1.0 - v);
    float sinTheta = sqrt(v);
    float x = cos(phi) * sinTheta;
    float y = sin(phi) * sinTheta;
    float z = cosTheta;

    return vec3(x, y, z);
}

vec3 evaluateBxDF(out vec3 origin,in out vec3 direction)
{
    surfaceState.wi = -direction;

    origin = pld.hitPoint;

    vec3 sampleDir = sampleDisneyDiffuse();
    direction = fma(vec3(sampleDir.x), surfaceState.tangent, fma(vec3(sampleDir.y), surfaceState.bitangent, sampleDir.z * surfaceState.normal));

    surfaceState.wo = direction;
    surfaceState.wm = normalize(surfaceState.wi + surfaceState.wo);
    surfaceState.hDotL = dot(surfaceState.wm, surfaceState.wo);
    surfaceState.hDotV = dot(surfaceState.wm, surfaceState.wi);
    surfaceState.vDotL = dot(surfaceState.wi, surfaceState.wo);
    surfaceState.nDotL = dot(surfaceState.normal, surfaceState.wo);
    surfaceState.nDotV = dot(surfaceState.normal, surfaceState.wi);
    surfaceState.nDotH = dot(surfaceState.normal, surfaceState.wm);

    float pdf;
    bool thin = true; // FIXME
    vec3 diffuse = evaluateDisneyDiffuse(thin, pdf);

    return diffuse / pdf;
}

vec3 tracePaths(in vec2 uv)
{
    vec3 color = vec3(0.0);
    vec3 throughput = vec3(1.0);
    int maxDepth = 8;

    // create ray origin and direction from camera data.
    vec4 origin, direction;
    createRay(uv, origin, direction);

    for(uint depth = 0; depth < maxDepth; ++depth)
    {
        traceRayEXT(
            TLAS,
            gl_RayFlagsOpaqueEXT | gl_RayFlagsCullBackFacingTrianglesEXT,
            0xff,   // cullMask
            0,      // sbtRecordOffset
            0,      // sbtRecordStride
            0,      // missIndex
            origin.xyz,
            0.001,
            direction.xyz,
            1000.0,
            0       // payloadLocation
        );

        if(pld.hit)
        {
            Material material = materials[pld.triangle.materialId];
            populateSurfaceState(material);

            color += throughput * surfaceState.bsdf.emission;
            vec3 bxdf = evaluateBxDF(origin.xyz, direction.xyz);
            throughput *= bxdf;
            continue;
        }
        else
        {
            color += throughput * vec3(0.02, 0.04, 0.08);
        }

        break;
    }

    return color;
}

void main()
{
    vec4 accumColor = frame > 0 ? imageLoad(accumulationImage, ivec2(gl_LaunchIDEXT.xy)) : vec4(0.0, 0.0, 0.0, 0.0);
    accumColor.rgb *= accumColor.w;

    vec3 color = vec3(0.0);
    const vec2 pixelCorner = vec2(gl_LaunchIDEXT.xy);
    rngState = 1 + wangHash(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x) + frame * 100;
    vec2 uv;

    uv = (pixelCorner + vec2(rand(), rand())) / vec2(gl_LaunchSizeEXT.xy);
    uv = uv * 2.0 - 1.0;

    color += tracePaths(uv);

    accumColor.rgb += color;
    accumColor.w += 1.0;
    accumColor.rgb /= accumColor.w;
    imageStore(accumulationImage, ivec2(gl_LaunchIDEXT.xy), accumColor);
    vec4 resultColor = vec4(linearTosRGB(toneMapACES(accumColor.rgb)), 1.0);
    imageStore(resultImage, ivec2(gl_LaunchIDEXT.xy), resultColor);
}
