#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "globals.glsl"

layout(set = 0, binding = 0) uniform accelerationStructureEXT TLAS;
layout(set = 0, binding = 1, rgba8) uniform image2D outImage;

layout(location = 0) rayPayloadEXT RayPayload pld;

layout(set = 1, binding = 0, scalar) uniform CameraBufferRT
{
    mat4 inverseView;
    mat4 inverseProjection;
} camera;

layout(set = 2, binding = 0) uniform sampler2D textures[];
layout(set = 2, binding = 2, scalar) buffer _MaterialInfo { Material materials[]; };

const float GAMMA     = 2.2;
const float INV_GAMMA = 1.0 / GAMMA;
vec3 linearTosRGB(vec3 color)
{
    return pow(color, vec3(INV_GAMMA));
}

// ACES tone map
// see: https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/
vec3 toneMapACES(vec3 color)
{
    const float A = 2.51;
    const float B = 0.03;
    const float C = 2.43;
    const float D = 0.59;
    const float E = 0.14;
    return linearTosRGB(clamp((color * (A * color + B)) / (color * (C * color + D) + E), 0.0, 1.0));
}

void createRay(in vec2 screenUV, out vec4 origin, out vec4 direction)
{
    origin = camera.inverseView * vec4(0.0, 0.0, 0.0, 1.0);
    vec4 target = camera.inverseProjection * vec4(screenUV.x, screenUV.y, 1.0, 1.0);
    direction = camera.inverseView * vec4(normalize(target.xyz), 0.0);
}

void main()
{
    vec3 color = vec3(0.0, 0.0, 0.0125);
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    vec2 uv = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    uv = uv * 2.0 - 1.0;

    // create ray origin and direction from camera data.
    vec4 origin, direction;
    createRay(uv, origin, direction);

    const uint rayFlags = gl_RayFlagsNoneEXT;
    const uint cullMask = 0xff;
    const uint sbtRecordOffset = 0;
    const uint sbtRecordStride = 0;
    const uint missIndex = 0;
    const float tmin = 0.001;
    const float tmax = 100.0;
    const int payload = 0;

    traceRayEXT(TLAS, rayFlags, cullMask, sbtRecordOffset, sbtRecordStride, missIndex, origin.xyz, tmin, direction.xyz, tmax, payload);

    if(pld.hitT != INFINITY)
    {
        Material material = materials[pld.triangle.materialId];
        color = material.baseColor.rgb;
        if (material.baseColorTextureId >= 0)
        {
            color *= textureLod(textures[nonuniformEXT(material.baseColorTextureId)], pld.triangle.interpolatedUV, 0).rgb;
        }
    }

    imageStore(outImage, ivec2(gl_LaunchIDEXT.xy), vec4(toneMapACES(color), 1.0));
}
