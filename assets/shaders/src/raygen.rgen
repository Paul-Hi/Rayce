#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "globals.glsl"
#include "utils.glsl"

layout(set = RT_SET, binding = TLAS_BINDING) uniform accelerationStructureEXT TLAS;
layout(set = RT_SET, binding = ACCUM_BINDING, rgba32f) uniform image2D accumulationImage;
layout(set = RT_SET, binding = RESULT_BINDING, rgba8) uniform image2D resultImage;

layout(location = 0) rayPayloadEXT RayPayload pld;

layout(set = CAMERA_SET, binding = CAMERA_BINDING, scalar) uniform CameraBufferRT
{
    mat4 inverseView;
    mat4 inverseProjection;
} camera;

layout(set = MODEL_SET, binding = TEXTURE_BINDING) uniform sampler2D textures[];
layout(set = MODEL_SET, binding = INSTANCE_BINDING, scalar) buffer _InstanceInfo { InstanceData ref[]; };
layout(set = MODEL_SET, binding = MATERIAL_BINDING, scalar) buffer _MaterialInfo { Material materials[]; };
layout(set = MODEL_SET, binding = LIGHT_BINDING, scalar) buffer _LightInfo { Light lights[]; };
layout(set = MODEL_SET, binding = SPHERE_BINDING, scalar) buffer _SphereInfo { Sphere spheres[]; };

layout(buffer_reference, scalar) buffer Vertices { Vertex v[]; };
layout(buffer_reference, scalar) buffer Indices { uint i[]; };

layout(push_constant) uniform PushConstants {
    int frame;
    int lightCount;
};

#include "surface_state.glsl"
#include "bsdf.glsl"
#include "sampling.glsl"

Tri getTriangle(uint primitiveIndex, uint instanceCustomIndex, vec2 hitAttributes, mat4x3 worldToObject, vec3 viewPosition, vec3 hitPosition)
{
    Tri tri;
    const uint triangleIndex = primitiveIndex * 3;

    Indices indices = Indices(ref[instanceCustomIndex].indexReference);
    Vertices vertices = Vertices(ref[instanceCustomIndex].vertexReference);

    for(uint i = 0; i < 3; ++i)
    {
        const uint idx = indices.i[triangleIndex + i];
        tri.vertices[i] = vertices.v[idx];
    }

    tri.barycentrics = vec3(1.0 - hitAttributes.x - hitAttributes.y, hitAttributes.x, hitAttributes.y);
    tri.interpolatedUV = tri.vertices[0].uv * tri.barycentrics.x + tri.vertices[1].uv * tri.barycentrics.y + tri.vertices[2].uv * tri.barycentrics.z;

    tri.interpolatedNormal = tri.vertices[0].normal * tri.barycentrics.x + tri.vertices[1].normal * tri.barycentrics.y + tri.vertices[2].normal * tri.barycentrics.z;
    tri.interpolatedNormal = normalize(vec3(tri.interpolatedNormal * worldToObject));

    tri.dfd1 = tri.vertices[1].position - tri.vertices[0].position;
    tri.dfd2 = tri.vertices[2].position - tri.vertices[0].position;

    tri.uvd1 = tri.vertices[1].uv - tri.vertices[0].uv;
    tri.uvd2 = tri.vertices[2].uv - tri.vertices[0].uv;

    tri.geometryNormal = vec3(
        tri.dfd1.y * tri.dfd2.z - tri.dfd1.z * tri.dfd2.y,
        tri.dfd1.z * tri.dfd2.x - tri.dfd1.x * tri.dfd2.z,
        tri.dfd1.x * tri.dfd2.y - tri.dfd1.y * tri.dfd2.x
    );
    tri.geometryNormal = normalize(vec3(tri.geometryNormal * worldToObject));

    tri.materialId = ref[instanceCustomIndex].materialId;

    tri.lightId = ref[instanceCustomIndex].lightId;

    return tri;
}

Sph getSphere(vec3 hitPoint, uint instanceCustomIndex, uint primitiveIndex, vec2 hitAttributes)
{
    Sph sphere;

    int sphereId = ref[instanceCustomIndex + primitiveIndex].sphereId;

    Sphere pShere = spheres[sphereId];

    sphere.normal = normalize(hitPoint - pShere.center);

    sphere.materialId = ref[instanceCustomIndex + primitiveIndex].materialId;

    sphere.lightId = ref[instanceCustomIndex + primitiveIndex].lightId;

    return sphere;
}

void createRay(in vec2 screenUV, out vec4 origin, out vec4 direction)
{
    origin = camera.inverseView * vec4(0.0, 0.0, 0.0, 1.0);
    vec4 target = camera.inverseProjection * vec4(screenUV.x, screenUV.y, 1.0, 1.0);
    direction = normalize(camera.inverseView * vec4(normalize(target.xyz), 0.0));
}

vec3 tracePaths(in vec2 uv)
{
    vec3 color = vec3(0.0);
    vec3 throughput = vec3(1.0);
    const int maxDepth = 32; // never reached (hopyfully)
    const int russianRouletteStart = 4;

    // create ray origin and direction from camera data.
    vec4 origin, direction;
    createRay(uv, origin, direction);

    LightSample lightSample;
    lightSample.pdf = 1.0;
    BSDFSample bsdfSample;
    bsdfSample.pdf = 1.0;
    bool inside = false;
    surfaceState.normal = vec3(0.0, 0.0, 0.0);

    for(uint depth = 0; depth < maxDepth; ++depth)
    {
        traceRayEXT(
            TLAS,
            gl_RayFlagsOpaqueEXT, // FIXME: | gl_RayFlagsCullBackFacingTrianglesEXT,
            0xff,   // cullMask
            0,      // sbtRecordOffset
            0,      // sbtRecordStride
            0,      // missIndex
            origin.xyz + surfaceState.normal * EPSILON, // This is required for i.e. curved diffuse surfaces like spheres interiors
            0.001,
            direction.xyz,
            1000.0,
            0       // payloadLocation
        );

        if(pld.hit)
        {
            int lightId = -1;
            Material material;
            if(pld.hitInfo.hitKind == hitKindTriangleMesh)
            {
                Tri triangle = getTriangle(pld.hitInfo.primitiveId, pld.hitInfo.instanceCustomIndex, pld.hitInfo.hitAttributes, pld.hitInfo.worldToObject, origin.xyz, pld.hitPoint);
                material = materials[triangle.materialId];
                populateSurfaceStateTriangle(material, triangle);
            }
            else if(pld.hitInfo.hitKind == hitKindProceduralSphere)
            {
                Sph sphere = getSphere(pld.hitPoint, pld.hitInfo.instanceCustomIndex, pld.hitInfo.primitiveId, pld.hitInfo.hitAttributes);
                material = materials[sphere.materialId];
                populateSurfaceStateSphere(material, sphere);
                lightId = sphere.lightId;
            }

            if(lightId >= 0)
            {
                float lightPdf = (depth == 0 || bsdfSample.dirac) ? 1.0 : pdfLight(lightId, origin.xyz);
                float miWeight = powerHeuristic(bsdfSample.pdf, lightPdf);

                color += throughput * miWeight * lights[lightId].radiance;
            }

            surfaceState.wo = worldToTangentFrame(-direction.xyz, surfaceState.tangent, surfaceState.bitangent, surfaceState.normal);
            origin.xyz = pld.hitPoint;

            if(!hasDiracPdf(material) && sampleLights(origin.xyz, lightId, lightSample))
            {
                float bsdfPdf = pdfBSDF(material);
                float miWeight = powerHeuristic(lightSample.pdf, bsdfPdf);
                color += throughput * miWeight * evaluateBSDF(material) * lightSample.radiance / lightSample.pdf;
            }

            if(!sampleBSDF(material, bsdfSample))
            {
                break;
            }

            direction.xyz = tangentToWorld(surfaceState.wi, surfaceState.tangent, surfaceState.bitangent, surfaceState.normal);

            float nDotL = cosThetaTS(surfaceState.wi);

            throughput *= bsdfSample.reflectance * abs(nDotL) / bsdfSample.pdf;

            // russian roulette
            if (depth >= russianRouletteStart)
            {
                float p = max(throughput.x, max(throughput.y, throughput.z));
                if (rand() > p) {
                    break;
                }

                throughput *= 1.0 / p;
            }
            continue;
        }
        else
        {
            color += throughput * vec3(0.02, 0.04, 0.08);
        }

        break;
    }

    return color;
}

void main()
{
    vec4 accumColor = frame > 0 ? imageLoad(accumulationImage, ivec2(gl_LaunchIDEXT.xy)) : vec4(0.0, 0.0, 0.0, 0.0);
    accumColor.rgb *= accumColor.w;

    vec3 color = vec3(0.0);
    const vec2 pixelCorner = vec2(gl_LaunchIDEXT.xy);
    rngState = 1 + wangHash(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x) + frame * 100;

    vec2 uv = (pixelCorner + vec2(rand(), rand())) / vec2(gl_LaunchSizeEXT.xy);
    uv = uv * 2.0 - 1.0;

    color += tracePaths(uv);

    accumColor.rgb += color;
    accumColor.w += 1.0;
    accumColor.rgb /= accumColor.w;
    imageStore(accumulationImage, ivec2(gl_LaunchIDEXT.xy), accumColor);
    vec4 resultColor = vec4(linearTosRGB(toneMapACES(accumColor.rgb)), 1.0);
    imageStore(resultImage, ivec2(gl_LaunchIDEXT.xy), resultColor);
}
